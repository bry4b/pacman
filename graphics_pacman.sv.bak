module graphics_pacman (
    input [9:0] xpos,           // current x position read by vga
    input [9:0] ypos,           // current y position read by vga

    input [9:0] xloc,           // x coordinate of center of pacman location (7,7 in bitfield)
    input [9:0] yloc,           // y coordinate of center of pacman location (7,7 in bitfield)

    input [1:0] pacman_dir,     // RighT, UP, DowN, LefT
    input [1:0] pacman_state,     
    input [1:0] animation_cycle,  

    output reg [7:0] color
);

// COLORS
localparam YLW  = 8'b11111100;
localparam BLK  = 8'b00000000; 

// ROTATIONS
localparam NM = 2'b00;      // NorMal
localparam CC = 2'b01;      // Counter-Clockwise
localparam CW = 2'b10;      // ClockWise
localparam FL = 2'b11;      // FLipped (180)

reg [0:255] pacman_frames [0:2] = '{
    256'h000007c01ff03ff83ff87ffc7ffc7ffc7ffc7ffc3ff83ff81ff007c000000000;
    256'h000007c01ff03ff83ff87fe07f0078007f007fe03ff83ff81ff007c000000000;
    256'h000007c01fc03f803f007e007c0078007c007e003f003f801fc007c000000000;
};

wire [3:0] xpixel = xpos % 16;
wire [3:0] ypixel = ypos % 16;
wire [0:255] pacman_sprite = pacman_frames[animation_cycle];
reg pixel;

always_comb begin
    if ( ( (xloc < 7 || xloc-7 <= xpos) && xpos <= xloc+8) && ( (yloc < 7 || yloc-7 <= ypos) && ypos <= yloc+8) ) begin
        case (pacman_dir)
            NM: begin
                pixel = pacman_sprite [6'd16 * ypixel + xpixel];
            end

            CC: begin
                pixel = pacman_sprite [6'd15 + 16 * xpixel - ypixel];
            end

            CW: begin
                pixel = pacman_sprite [6'd240 - 16 * xpixel + ypixel];
            end

            FL: begin
                pixel = pacman_sprite [6'd255 - 16 * ypixel - xpixel];
            end
        endcase
        if (pixel) begin
            color = YLW;
        end else begin
            color = BLK;
        end
    end else begin
        color = BLK;
    end

end

endmodule
